#!/bin/bash
# Launch script for Scripted 
 
# Does the following:
# 1. locate any existing running node 
# 2. kills server
# 3. call 'launchnode' to start a new node
# 4. Opens a URL that loads the editor - the url encodes the file we want to edit


# Discover pid for server process
pid=`ps axu | grep "node scripted.js" | grep -v grep | awk '{print $2}'`
# echo "server pid = " $pid

# Here is the linux equivalent of the code block below *sigh*
#DIRNAME=`dirname $(readlink -f "$0")`

# Assume the path 
realScriptLocation=$0

file=$1

# If $0 is really a link, chase it down to the real location
linked=`ls -l "$0" | grep " -> "`
while [ ! -z "$linked" ]
do
    # echo "realScriptLocation currently $realScriptLocation"
	linkedLocation=`echo $linked | sed 's/^.* -> \(.*\)$/\1/'`
	# echo "linked location is $linkedLocation"

	# cope with links to './foo' '../foo' 'foo'
    firstchar=`echo $linkedLocation | head -c1`
    if [ $firstchar == '/' ]
    then
    	# starts with slash, absolute location
    	realScriptLocation=$linkedLocation
    else
    	# no slash, is there a dot?
    	if [ $firstchar == '.' ]
    	then
			if [ `echo $linkedLocation | head -c2` == '..' ]
			then
				# echo "starts with dotdot"
				# this does not cope with:
				# - multiple '..' are not dereferenced
				# - invoking from a non absolute path
				dir=`dirname $realScriptLocation`
				dir=`dirname $dir`
				realScriptLocation=${dir}/`echo $linkedLocation | cut -c4-`
			else
				# echo "it is *probably* ./ then something"
				dir=`dirname $realScriptLocation`
				realScriptLocation=${dir}/`echo $linkedLocation | cut -c3-`
			fi
    	else
			# echo "no dots so it is another relative to this directory"
			dir=`dirname $realScriptLocation`
			realScriptLocation=${dir}/$linkedLocation
    	fi
    fi

	linked=`ls -l "$realScriptLocation" | grep " -> "`
done;

# Now realScriptLocation points at the real scripted executable.
# The other support scripts can be referenced relative to this
# known location
# echo $realScriptLocation

DIRNAME=`dirname $realScriptLocation`
# echo "dirname is $DIRNAME"

LOGDIR="/tmp"

# kill the server process
if [ ! -z "$pid" ]
then
#  echo "killing node"
  kill -9 $pid
fi

# Log truncation - if > 2Meg then delete it
LOG_TOO_LONG=`find ${LOGDIR}/* -name "scripted.log" -size +2000000c 2>/dev/null`
if [ ! -z "$LOG_TOO_LONG" ]
then
  echo "${LOGDIR}/scripted.log is too large, emptying it..."
  rm $LOG_TOO_LONG
fi

echo "===" >> $LOGDIR/scripted.log
echo "launching node again: `date`" >> $LOGDIR/scripted.log
# echo $DIRNAME/launchnode

$DIRNAME/launchnode >> $LOGDIR/scripted.log 2>&1 &

dir=`pwd`

# if nothing specified, just exit (server will have restarted)
if [ -z "$file" ]
then
	echo "Not opening an editor, no file specified. Server has been restarted."
	exit 0
fi

if [ "$file" == "." ]
then
  URL=http://localhost:7261/editor$dir
else
  # does it start with a slash or is it relative?
  if [ `echo "$file " | cut -c1` == '/' ]
  then
    URL=http://localhost:7261/editor/$file
  else
    URL=http://localhost:7261/editor$dir/$file
  fi
fi


sleep 0.20

# some code to add an extra wait if the server hasn't started yet, work in progress
#serverUp=`curl http://localhost:7261/helo 2>&1`
#curlErrored=`echo $serverUp | grep "(7)"`
#echo "errored: $curlErrored"
#if [ ! -z "$curlErrored" ]
#then
#	sleep 0.20
#	serverUp=`curl http://localhost:7261/helo 2>&1`
#	curlErrored=`echo $serverUp | grep "(7)"`
#	echo "errored2: $curlErrored"
#fi


# echo "opening $dir/$file"
if which gnome-open > /dev/null; then
  gnome-open "$URL"
elif which xdg-open > /dev/null; then
  xdg-open "$URL"
elif which open > /dev/null; then
  open "$URL"
else
  echo "Could not detect the web browser to use."
fi
